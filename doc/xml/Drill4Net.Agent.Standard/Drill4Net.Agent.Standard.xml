<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Drill4Net.Agent.Standard</name>
    </assembly>
    <members>
        <member name="M:Drill4Net.Agent.Standard.CoverageDispatcher.BindPoint(System.String,Drill4Net.Agent.Abstract.Transfer.ExecClassData,System.Int32,System.Int32)">
            <summary>
            Bind point Uid to probe's range of the target class
            </summary>
            <param name="pointUid"></param>
            <param name="data"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Drill4Net.Agent.Standard.CoverageDispatcher.RegisterCoverage(System.String)">
            <summary>
            Register the coverage data by point Uid coming from Target side
            </summary>
            <param name="pointUid"></param>
        </member>
        <member name="M:Drill4Net.Agent.Standard.CoverageDispatcher.ClearAffectedData">
            <summary>
            Clearing the affected data (classes, probes, etc) after sending it to admin side
            </summary>
        </member>
        <member name="M:Drill4Net.Agent.Standard.StandardAgent.Init">
            <summary>
            It just run the ctor with the main init procedure.
            This function mainly used for debugging. It's not necessary
            in a real system because the ctor will be arised due Register call.
            </summary>
        </member>
        <member name="M:Drill4Net.Agent.Standard.StandardAgent.RegisterStatic(System.String)">
            <summary>
            Registering probe's data from injected Target app
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Drill4Net.Agent.Standard.StandardAgent.Register(System.String)">
            <summary>
            Registering probe's data from injected Target app
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Drill4Net.Agent.Standard.StandardAgentRepository">
            <summary>
            Repository for Standard Agent
            </summary>
        </member>
        <member name="P:Drill4Net.Agent.Standard.StandardAgentRepository.IsAnySession">
            <summary>
            Any sesion is exists?
            </summary>
        </member>
        <member name="M:Drill4Net.Agent.Standard.StandardAgentRepository.#ctor">
            <summary>
            Create repository for Standard Agent with default cfg or cfg founded by _reidrect.yml
            </summary>
        </member>
        <member name="M:Drill4Net.Agent.Standard.StandardAgentRepository.#ctor(System.String)">
            <summary>
            Create repository for Standard Agent
            </summary>
        </member>
        <member name="M:Drill4Net.Agent.Standard.StandardAgentRepository.GetEntities">
            <summary>
            Get list of <see cref="T:Drill4Net.Agent.Abstract.Transfer.AstEntity"/> for list of registered <see cref="T:Drill4Net.Profiling.Tree.InjectedType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Drill4Net.Agent.Standard.StandardAgentRepository.RegisterCoverage(System.String)">
            <summary>
            Register coverage from instrumented target by cross-point Uid 
            </summary>
            <param name="pointUid"></param>
            <returns></returns>
        </member>
        <member name="M:Drill4Net.Agent.Standard.StandardAgentRepository.GetUserDispather">
            <summary>
            Get the coverage dispatcher by current context if exists and otherwise create it
            </summary>
            <returns></returns>
        </member>
        <member name="T:Drill4Net.Agent.Standard.TreeConverter">
            <summary>
            Helper for converting DTO entities (<see cref="T:Drill4Net.Agent.Abstract.Transfer.AstEntity"/>, <see cref="T:Drill4Net.Agent.Abstract.Transfer.AstMethod"/>) 
            and also <see cref="T:Drill4Net.Agent.Standard.CoverageDispatcher"/> from <see cref="T:Drill4Net.Profiling.Tree.InjectedType"/>
            </summary>
        </member>
        <member name="M:Drill4Net.Agent.Standard.TreeConverter.ToAstEntities(System.Collections.Generic.IEnumerable{Drill4Net.Profiling.Tree.InjectedType})">
            <summary>
            Convert list of <see cref="T:Drill4Net.Profiling.Tree.InjectedType"/> to the list of <see cref="T:Drill4Net.Agent.Abstract.Transfer.AstEntity"/>
            for transferring onto Admin side
            </summary>
            <param name="injTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Drill4Net.Agent.Standard.TreeConverter.ToAstEntity(Drill4Net.Profiling.Tree.InjectedType)">
            <summary>
            Convert <see cref="T:Drill4Net.Profiling.Tree.InjectedType"/> to the <see cref="T:Drill4Net.Agent.Abstract.Transfer.AstEntity"/>
            for transferring onto Admin side
            </summary>
            <param name="injType"></param>
            <returns></returns>
        </member>
        <member name="M:Drill4Net.Agent.Standard.TreeConverter.ToAstMethod(Drill4Net.Profiling.Tree.InjectedMethod)">
            <summary>
            Convert <see cref="T:Drill4Net.Profiling.Tree.InjectedMethod"/> to the <see cref="T:Drill4Net.Agent.Abstract.Transfer.AstMethod"/>
            for transferring onto Admin side
            </summary>
            <param name="injMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Drill4Net.Agent.Standard.TreeConverter.CreateCoverageDispatcher(Drill4Net.Agent.Abstract.Transfer.StartSessionPayload,System.Collections.Generic.IEnumerable{Drill4Net.Profiling.Tree.InjectedType})">
            <summary>
            Create <see cref="T:Drill4Net.Agent.Standard.CoverageDispatcher"/> for session <see cref="T:Drill4Net.Agent.Abstract.Transfer.StartSessionPayload"/> 
            and bind it to list of <see cref="T:Drill4Net.Profiling.Tree.InjectedType"/>
            </summary>
            <param name="session"></param>
            <param name="injTypes"></param>
            <returns></returns>
        </member>
        <member name="T:ThisAssembly">
            <summary>Provides access to the current assembly information.</summary>
        </member>
        <member name="T:ThisAssembly.Git">
            <summary>Provides access to the git information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>IsDirty: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>IsDirtyString: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.RepositoryUrl">
            <summary>Repository URL: https://github.com/IvanEpam/TestA.git</summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>Branch: main</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>Commit: e68c3bc</summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>Sha: e68c3bc6f4544f35e3691ad5b4f6775cc7fce7cc</summary>
        </member>
        <member name="F:ThisAssembly.Git.CommitDate">
            <summary>Commit date: 2021-05-27T12:08:54+03:00</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>Commits on top of base version: 407</summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>Tag: </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>Base tag: </summary>
        </member>
        <member name="T:ThisAssembly.Git.BaseVersion">
            <summary>Provides access to the base version information used to determine the <see cref="T:ThisAssembly.Git.SemVer" />.</summary>      
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>Major: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>Minor: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>Patch: 0</summary>
        </member>
        <member name="T:ThisAssembly.Git.SemVer">
            <summary>Provides access to SemVer information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>Major: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>Minor: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>Patch: 407</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>Label: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>Label with dash prefix: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>Source: Default</summary>
        </member>
    </members>
</doc>
