<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Drill4Net.Profiling.Tree</name>
    </assembly>
    <members>
        <member name="M:Drill4Net.Profiling.Tree.GenericTree`1.Filter(System.Type,System.Boolean)">
            <summary>
            Filter children's entities of current entity (as a parent)
            </summary>
            <param name="flt"></param>
            <param name="inDepth"></param>
            <returns></returns>
        </member>
        <member name="M:Drill4Net.Profiling.Tree.InjectedSimpleEntity.MapPoints(System.Collections.Generic.Dictionary{Drill4Net.Profiling.Tree.InjectedSimpleEntity,Drill4Net.Profiling.Tree.InjectedSimpleEntity})">
            <summary>
            Get parent map of <see cref="T:Drill4Net.Profiling.Tree.CrossPoint"/> by it's <see cref="P:Drill4Net.Profiling.Tree.CrossPoint.PointUid"/>. 
            </summary>
            <param name="parentMap">Parent hiearchy map of entities. If empty it will calc</param>
            <returns></returns>
        </member>
        <member name="M:Drill4Net.Profiling.Tree.InjectedSimpleEntity.MapPointToMethods(System.Collections.Generic.Dictionary{Drill4Net.Profiling.Tree.InjectedSimpleEntity,Drill4Net.Profiling.Tree.InjectedSimpleEntity})">
            <summary>
            Get parent map of <see cref="T:Drill4Net.Profiling.Tree.InjectedMethod"/> by corresponding <see cref="P:Drill4Net.Profiling.Tree.CrossPoint.PointUid"/>. 
            </summary>
            <param name="parentMap">The hierarchy map of entity parents. If empty it will calc</param>
            <returns></returns>
        </member>
        <member name="T:Drill4Net.Profiling.Tree.CompilerGeneratedInfo">
            <summary>
            Info for compiler generated methods (caller, indexes, etc)
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CompilerGeneratedInfo.Caller">
            <summary>
            Caller of current (compiler generated) method
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CompilerGeneratedInfo.CallerIndex">
            <summary>
            The instruction index of the caller's IL code where this callee is called (in fact, parent index) 
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CompilerGeneratedInfo.FirstIndex">
            <summary>
            The first index in the compiler generated code which considered as 'business part'
            </summary>
        </member>
        <member name="T:Drill4Net.Profiling.Tree.CoverageData">
            <summary>
            Data of the method's coverage
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CoverageData.BlockByPart">
            <summary>
            Dictionary of code blocks: key is point Id, value - coverage part of code by this block
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CoverageData.PointToBlockEnds">
            <summary>
            Binding the cross-point by Uid to last index of the block's range in the probe list of method
            </summary>
        </member>
        <member name="M:Drill4Net.Profiling.Tree.CoverageData.#ctor">
            <summary>
            Create data of the method's coverage
            </summary>
        </member>
        <member name="T:Drill4Net.Profiling.Tree.CrossPoint">
            <summary>
            Cross-cutting point for injection code located in <see cref="T:Drill4Net.Profiling.Tree.InjectedMethod"/>
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CrossPoint.PointUid">
            <summary>
            Uid of <see cref="T:Drill4Net.Profiling.Tree.CrossPoint"/>
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CrossPoint.PointId">
            <summary>
            Some local Id of <see cref="T:Drill4Net.Profiling.Tree.CrossPoint"/> (may be a position of the instruction in IL code)
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CrossPoint.BusinessIndex">
            <summary>
            End-to-end index of the method instruction, taking into account
            only the business parts of the source code moved by the compiler
            to the classes generated by it
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CrossPoint.PointType">
            <summary>
            Semantic type of <see cref="T:Drill4Net.Profiling.Tree.CrossPoint"/> 
            </summary>
        </member>
        <member name="M:Drill4Net.Profiling.Tree.CrossPoint.#ctor(System.String,System.String,System.Int32,Drill4Net.Profiling.Tree.CrossPointType)">
            <summary>
            Create the cross-cutting point for the injection code located in <see cref="T:Drill4Net.Profiling.Tree.InjectedMethod"/>
            </summary>
            <param name="pointUid"></param>
            <param name="pointId"></param>
            <param name="businessIndex"></param>
            <param name="pointType"></param>
        </member>
        <member name="T:Drill4Net.Profiling.Tree.CrossPointType">
            <summary>
            The type of the cross-point in the intrumented Target
            </summary>
        </member>
        <member name="T:Drill4Net.Profiling.Tree.InjectedMethod">
            <summary>
            The injected method
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.TypeName">
            <summary>
            Gets or sets the name of the method's type.
            </summary>
            <value>
            The name of the method's type.
            </value>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.IsCompilerGenerated">
            <summary>
            Is this method compiler generated?
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.CGInfo">
            <summary>
            Compiler generated info if the method is generated by Compiler
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.CalleeIndexes">
            <summary>
            Indexes of the IL code's instructions for the current method's callees
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.BusinessMethod">
            <summary>
            Name of the business method (for the compiler generated methods)
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.BusinessType">
            <summary>
            Name of the business type (for the compiler generated methods)
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.Source">
            <summary>
            Some metadata about the current method
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.BusinessSize">
            <summary>
            Count of instructions in various 'business parts' of the IL code
            (including compiler generated classes and functions) at the own level
            of hierarchy of calls CG members
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.OwnBusinessSize">
            <summary>
            Count of only own 'business parts' of the IL code
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.Points">
            <summary>
            Cross-points of method's code
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.Coverage">
            <summary>
            Data of the method's coverage
            </summary>
        </member>
        <member name="T:Drill4Net.Profiling.Tree.InjectedSolution">
            <summary>
            The metadata of the injected Target projects (directories, assemblies, 
            classes, methods, cross-points, etc)
            </summary>
        </member>
        <member name="M:Drill4Net.Profiling.Tree.InjectedSolution.GetInjectedTreeTypes">
            <summary>
            Get list of the Tree entities' types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Drill4Net.Profiling.Tree.InjectedSolution.GetFrameworkRootDirectory(System.String)">
            <summary>
            Get root directory's object of the processed target by version of the framework (moniker)
            </summary>
            <param name="moniker">Moniker - short string version of the framework (netstandard2.0, net5.0, etc)</param>
            <returns></returns>
        </member>
        <member name="M:Drill4Net.Profiling.Tree.InjectedSolution.RemoveEmpties">
            <summary>
            Remove from Tree empty entitis
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedType.FromMethod">
            <summary>
            For compiler generated classes which was created 
            compiler for some business methods
            </summary>
        </member>
        <member name="T:Drill4Net.Profiling.Tree.MethodSignature">
            <summary>
            Metadata about method's signature
            </summary>
        </member>
        <member name="T:Drill4Net.Profiling.Tree.MethodType">
            <summary>
            Type of method by its semantic (ctor, normal, setter/getter, compiler generated, etc)
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.Unset">
            <summary>
            Type not specified
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.CompilerGenerated">
            <summary>
            Such methods are generated by the compiler (usually in special classes)
            and are logically part of the code of other, as a rule, business methods
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.Normal">
            <summary>
            Normal ('business') method from the user source code
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.Constructor">
            <summary>
            It's constructor
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.Destructor">
            <summary>
            It's destructor
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.Local">
            <summary>
            It's local (nested) method
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.Getter">
            <summary>
            It's getter method for a property
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.Setter">
            <summary>
            It's setter method for a property
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.EventAdd">
            <summary>
            It's method for the adding event
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.EventRemove">
            <summary>
            It's method for the removing event
            </summary>
        </member>
        <member name="T:Drill4Net.Profiling.Tree.MethodSource">
            <summary>
            Metadata about method
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.MethodSource.MethodType">
            <summary>
            Type of method
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.MethodSource.HashCode">
            <summary>
            Hash code of method body for the tracking of it's changes
            </summary>
        </member>
    </members>
</doc>
