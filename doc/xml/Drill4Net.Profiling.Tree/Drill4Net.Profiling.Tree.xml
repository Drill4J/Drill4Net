<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Drill4Net.Profiling.Tree</name>
    </assembly>
    <members>
        <member name="M:Drill4Net.Profiling.Tree.InjectedSimpleEntity.MapPoints(System.Collections.Generic.Dictionary{Drill4Net.Profiling.Tree.InjectedSimpleEntity,Drill4Net.Profiling.Tree.InjectedSimpleEntity})">
            <summary>
            Get parent map of <see cref="T:Drill4Net.Profiling.Tree.CrossPoint"/> by it's <see cref="P:Drill4Net.Profiling.Tree.CrossPoint.PointUid"/>. 
            </summary>
            <param name="parentMap">Parent hiearchy map of entities. If empty it will calc</param>
            <returns></returns>
        </member>
        <member name="M:Drill4Net.Profiling.Tree.InjectedSimpleEntity.MapPointToMethods(System.Collections.Generic.Dictionary{Drill4Net.Profiling.Tree.InjectedSimpleEntity,Drill4Net.Profiling.Tree.InjectedSimpleEntity})">
            <summary>
            Get parent map of <see cref="T:Drill4Net.Profiling.Tree.InjectedMethod"/> by corresponding <see cref="P:Drill4Net.Profiling.Tree.CrossPoint.PointUid"/>. 
            </summary>
            <param name="parentMap">The hierarchy map of entity parents. If empty it will calc</param>
            <returns></returns>
        </member>
        <member name="T:Drill4Net.Profiling.Tree.CompilerGeneratedInfo">
            <summary>
            Info for compiler generated methods (caller, indexes, etc)
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CompilerGeneratedInfo.Caller">
            <summary>
            Caller of current (compiler generated) method
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CompilerGeneratedInfo.CallerIndex">
            <summary>
            The instruction index of the caller's IL code where this callee is called (in fact, parent index) 
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CompilerGeneratedInfo.FirstIndex">
            <summary>
            The first index in the compiler generated code which considered as 'business part'
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CoverageData.BlockByPart">
            <summary>
            Dictionary of code blocks: key is point Id, value - coverage part of code by this block
            </summary>
        </member>
        <member name="M:Drill4Net.Profiling.Tree.CoverageData.CoverageLength">
            <summary>
            Get "count of probes",it means in fact length of code in termins Injector
            </summary>
            <returns></returns>
        </member>
        <member name="T:Drill4Net.Profiling.Tree.CrossPoint">
            <summary>
            Cross-cutting point for injection code into <see cref="T:Drill4Net.Profiling.Tree.InjectedMethod"/>
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CrossPoint.PointUid">
            <summary>
            Uid of <see cref="T:Drill4Net.Profiling.Tree.CrossPoint"/>
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CrossPoint.PointId">
            <summary>
            Some local Id of <see cref="T:Drill4Net.Profiling.Tree.CrossPoint"/> (may be a position of the instruction in IL code)
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.CrossPoint.BusinessIndex">
            <summary>
            End-to-end index of the instruction, taking into account
            only the business parts of the source code moved by the compiler
            to the classes generated by it
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.BusinessSize">
            <summary>
            Count of instructions in various 'business parts' of the IL code
            (including compiler generated classes and functions) at the own level
            of hierarchy of calls CG members
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedMethod.OwnBusinessSize">
            <summary>
            Count of only own 'business parts' of the IL code
            </summary>
        </member>
        <member name="P:Drill4Net.Profiling.Tree.InjectedType.FromMethod">
            <summary>
            For compiler generated classes which was created 
            compiler for some business methods
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.Unset">
            <summary>
            Type not specified
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.CompilerGenerated">
            <summary>
            Such methods are generated by the compiler (usually in special classes)
            and are logically part of the code of other, as a rule, business methods
            </summary>
        </member>
        <member name="F:Drill4Net.Profiling.Tree.MethodType.Normal">
            <summary>
            Normal ('business') method from the user source code
            </summary>
        </member>
    </members>
</doc>
