using System;

namespace Drill4Net.Profiling.Tree
{
    /// <summary>
    /// Cross-cutting point for injection code located in <see cref="InjectedMethod"/>
    /// </summary>
    [Serializable]
    public class CrossPoint : InjectedSimpleEntity
    {
        /// <summary>
        /// Uid of <see cref="CrossPoint"/>
        /// </summary>
        public string PointUid { get; set; }

        /// <summary>
        /// Position of the instruction in the original IL code
        /// </summary>
        public int OrigInd { get; set; }

        /// <summary>
        /// End-to-end index of the method instruction, taking into account
        /// only the business parts of the source code moved by the compiler
        /// to the classes generated by it
        /// </summary>
        public int BusinessIndex { get; set; }

        /// <summary>
        /// Semantic type of <see cref="CrossPoint"/> 
        /// </summary>
        public CrossPointType PointType { get; set; }

        #region PDB
        public int? RowStart { get; set; }
        public int? RowEnd { get; set; }
        public int? ColStart { get; set; }
        public int? ColEnd { get; set; }
        #endregion

        /*************************************************************************************/

        /// <summary>
        /// Create the cross-cutting point for the injection code located in <see cref="InjectedMethod"/>
        /// </summary>
        /// <param name="pointUid">Uid of point</param>
        /// <param name="origInd">Index of instruction from whole original method's body</param>
        /// <param name="bizInd">End-to-end index of the method instruction, taking into account
        /// only the business parts of the source code moved by the compiler to the classes generated by it</param>
        /// <param name="pointType">Type of point</param>
        public CrossPoint(string pointUid, int origInd, int bizInd, CrossPointType pointType):
            base(null)
        {
            PointUid = pointUid;
            OrigInd = origInd;
            PointType = pointType;
            BusinessIndex = bizInd;
        }

        /*************************************************************************************/

        public override string ToString()
        {
            var s =  $"P: {PointUid}: {PointType}_{OrigInd}";
            if (BusinessIndex != -1)
                s += $"/{BusinessIndex}";
            return s;
        }
    }
}
