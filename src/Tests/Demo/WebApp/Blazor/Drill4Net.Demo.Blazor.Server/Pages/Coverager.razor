@page "/coverager"
@using Drill4Net.Demo.Target

<MudText Typo="Typo.h4">Coverager</MudText>
<span></span>

@*Group runers*@
<MudGrid>
    <MudItem xs="12" md="12">
        <MudPaper Class="d-flex flex-row py-2 px-1">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="RunGroup_A">Func 1</MudButton>
            <MudText Class="pa-2 mx-2" Typo="Typo.body2">@GetGroupCoverageDesc(MethodGroupType.A)</MudText>
        </MudPaper>
        <MudPaper Class="d-flex flex-row py-2 px-1">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="RunGroup_B">Func 2</MudButton>
            <MudText Class="pa-2 mx-2" Typo="Typo.body2">@GetGroupCoverageDesc(MethodGroupType.B)</MudText>
        </MudPaper>
        <MudPaper Class="d-flex flex-row py-2 px-1">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="RunGroup_C">Func 3</MudButton>
            <MudText Class="pa-2 mx-2" Typo="Typo.body2">@GetGroupCoverageDesc(MethodGroupType.C)</MudText>
        </MudPaper>
        <MudPaper Class="d-flex flex-row py-2 px-1">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="RunGroup_D">Func 3</MudButton>
            <MudText Class="pa-2 mx-2" Typo="Typo.body2">@GetGroupCoverageDesc(MethodGroupType.D)</MudText>
        </MudPaper>
    </MudItem>
</MudGrid>

<MudText Class="pa-2 mx-2" Typo="Typo.body2"><strong>Coverage: @_coverProc%</strong></MudText>

@code {
    private Dictionary<MethodGroupType, double> _coverages = new Dictionary<MethodGroupType, double>
{
        { MethodGroupType.A, 25 }, { MethodGroupType.B, 25 }, { MethodGroupType.C, 25 }, { MethodGroupType.D, 25 }
    };

    private HashSet<MethodGroupType> _coverGroups = new HashSet<MethodGroupType>();
    private double _coverProc { get; set; }

    /*******************************************************************/

    string GetGroupCoverageDesc(MethodGroupType group)
    {
        return GetGroupCoverage(group) + "%";
    }

    double GetGroupCoverage(MethodGroupType group)
    {
        return _coverages[group];
    }

    void RunGroup_A()
    {
        var c = new CoverageTarget();
        c.IfElse_FullSimple_1(false);
        CoverGroup(MethodGroupType.A);
    }

    void RunGroup_B()
    {
        var c = new CoverageTarget();
        c.IfElse_FullSimple_1(true);
        CoverGroup(MethodGroupType.B);
    }

    void RunGroup_C()
    {
        var c = new CoverageTarget();
        c.IfElse_FullSimple_2(false);
        CoverGroup(MethodGroupType.C);
    }

    void RunGroup_D()
    {
        var c = new CoverageTarget();
        c.IfElse_FullSimple_2(true);
        CoverGroup(MethodGroupType.D);
    }

    void CoverGroup(MethodGroupType id)
    {
        if (!_coverGroups.Contains(id))
        {
            _coverGroups.Add(id);
            _coverProc += GetGroupCoverage(id);
        }
    }
}


